<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.main.careerbro.modules.salary.dao.SalaryDao">

    <sql id="salaryColumns">
        a.id as id,
        d.city as city,
        d.id as cityId,
        j.cname as job,
        j.id as jobId,
        u.petname as user,
        col.cname as college,
        i.cname as industry,
        cor.cname as corporation,
        cor.id as corporationId,
        a.year_salary_max as yearSalaryMax,
        a.year_salary_min as yearSalaryMin,
        a.month_salary as monthSalary,
        a.month_num	as monthNum,
        a.welfare as welfare,
        a.college_level	as collegeLevel,
        a.edu_background as eduBackGround,
        a.offer_time as offerTime,
        a.experience_month_num as experienceMonthNum,
        a.agree_num	as agreeNum,
        a.opp_num as oppNum,
        a.gra_num as graNum,
        a.share_num as shareNum,
        a.reserve_num as reserveNum,
        a.read_num as readNum,
        a.heat_rate	 as heatRate,
        a.create_time as createTime,
        a.update_time as updateTime

    </sql>

    <sql id="salaryJoins">
        LEFT JOIN district d ON d.id = a.city_id
        LEFT JOIN  job j ON j.id = a.job_id
        LEFT JOIN user u ON u.id = a.user_id
        LEFT JOIN college col ON col.id = a.college_id
        LEFT JOIN industry i ON i.id = a.industry_id
        LEFT JOIN corporation cor ON cor.id = a.cor_id
    </sql>

    <select id="getSalaryByUser" resultType="com.main.careerbro.modules.salary.entity.Salary">
        SELECT 
        <include refid="salaryColumns"/>
        FROM salary a
        <include refid="salaryJoins"/>
        WHERE a.user_id = #{user}
        ORDER BY heat_rate DESC,a.create_time DESC ,a.update_time DESC
    </select>

    <select id="getSalaryById" resultType="com.main.careerbro.modules.salary.entity.Salary">
        SELECT
        <include refid="salaryColumns"/>
        FROM salary a
        <include refid="salaryJoins"/>
        WHERE a.id = #{id}
    </select>

    <select id="getAllSalary" resultType="com.main.careerbro.modules.salary.entity.Salary">
        SELECT
        <include refid="salaryColumns"/>
        FROM salary a
        <include refid="salaryJoins"/>
        <where>
        <if test="null != collegeId">
            a.college_id = #{collegeId}
        </if>
        <if test="null != industryId">
            AND a.industry_id = #{industryId}
        </if>
        <if test="null != corporationId">
            AND a.cor_id = #{corporationId}
        </if>
        <if test="null != cityId">
            AND a.city_id = #{cityId}
        </if>
        <if test="null != jobId">
            AND a.job_id = #{jobId}
        </if>
        <if test="null != type">
            AND a.edu_background = #{type}
        </if>
        <if test="null != experienceMonthNumMin">
            AND experience_month_num >= #{experienceMonthNumMin}
        </if>
        <if test="null != experienceMonthNumMax">
            AND experience_month_num &lt;= #{experienceMonthNumMax}
        </if>
        <if test="null != yearSalaryMax">
            AND year_salary_max >= #{yearSalaryMax}
        </if>
        <if test="null != yearSalaryMin">
            AND year_salary_min &lt;= #{yearSalaryMin}
        </if>
        </where>
        <choose>
            <when test="order == 0">
                ORDER BY read_num DESC
            </when>
            <when test="order == 1">
                ORDER BY read_num DESC
            </when>
            <when test="order == 2">
                ORDER BY read_num DESC
            </when>
            <otherwise>
                ORDER BY heat_rate DESC,a.create_time DESC ,a.update_time DESC
            </otherwise>
        </choose>
    </select>

    <insert id="saveSalary">
        INSERT INTO salary(
        id,
        city_id,
        job_id,
        user_id,
        college_id,
        industry_id,
        cor_id,
        year_salary_max,
        year_salary_min,
        month_salary,
        month_num,
        welfare,
        college_level,
        edu_background,
        offer_time,
        experience_month_num,
        agree_num,
        opp_num,
        gra_num,
        share_num,
        read_num,
        reserve_num,
        create_time,
        update_time
        )VALUES (
        #{id},
        #{city},
        #{job},
        #{user},
        #{college},
        #{industry},
        #{corporation},
        #{yearSalaryMax},
        #{yearSalaryMin},
        #{monthSalary},
        #{monthNum},
        #{welfare},
        #{collegeLevel},
        #{eduBackGround},
        #{offerTime},
        #{experienceMonthNum},
        0,
        0,
        0,
        0,
        0,
        0,
        NOW(),
        NOW()
        )
    </insert>

    <update id="updateSalary">
        UPDATE salary
        SET city_id = #{city},
        job_id = #{job},
        user_id = #{user},
        college_id = #{college},
        industry_id = #{industry},
        cor_id = #{corporation},
        year_salary_max = #{yearSalaryMax},
        year_salary_min = #{yearSalaryMin},
        month_salary = #{monthSalary},
        month_num = #{monthNum},
        welfare = #{welfare},
        college_level = #{collegeLevel},
        edu_background = #{eduBackGround},
        offer_time = #{offerTime},
        experience_month_num = #{experienceMonthNum},
        update_time = NOW()
        WHERE id = #{id}
    </update>
    
    <update id="updateSalaryExtend">
        UPDATE salary
        SET
        <if test="agree == 1">
            agree_num = agree_num + 1,
        </if>
        <if test="agree == 0">
            agree_num = if(agree_num&lt;0,0,agree_num-1),
        </if>
        <if test="opp == 1">
            opp_num = opp_num + 1,
        </if>
        <if test="opp == 0">
            opp_num = if(opp_num&lt;0,0,opp_num-1),
        </if>
        <if test="gra == 1">
            gra_num = gra_num + 1,
        </if>
        <if test="gra == 0">
            gra_num = if(gra_num&lt;0,0,gra_num-1),
        </if>
        <if test="reserve == 1">
            reserve_num = reserve_num + 1,
        </if>
        <if test="reserve == 0">
            reserve_num = if(reserve_num&lt;0,0,reserve_num-1),
        </if>
        share_num = 0
        WHERE id = #{salaryId}
    </update>

    <select id="getEvaSystemReserve" resultType="com.main.careerbro.modules.salary.entity.Salary">
        SELECT
        <include refid="salaryColumns"/>
        FROM salary a
        <include refid="salaryJoins"/>
        RIGHT JOIN eva_system eva on eva.salary_id = a.id
        WHERE eva.user_id = #{uid}
        AND eva.reserve = 1
        ORDER BY heat_rate DESC,a.create_time DESC ,a.update_time DESC
    </select>
    
    <update id="addReadNum">
        UPDATE salary
        SET read_num = read_num + 1
        WHERE id = #{id}
    </update>

    <select id="getMostCity" resultType="java.util.HashMap">
        SELECT d.id as id,d.cname as name,count(d.id) as number
        FROM (SELECT c.id,c.city as cname
        FROM salary a
        JOIN district b ON a.city_id = b.id
		JOIN district c ON c.city = b.city AND c.place_level = '3'
        WHERE  date(a.update_time) >= DATE_SUB(CURDATE(), INTERVAL #{day} DAY)) d
        GROUP BY d.id,d.cname
        ORDER BY count(d.id) DESC
        LIMIT ${start*limit-limit},${limit}
    </select>
    
    <select id="getMostCor" resultType="java.util.HashMap">
        SELECT c.id as id,c.cname as name,count(c.id) as number
        FROM (SELECT b.id,b.cname
        FROM salary a
        JOIN corporation b ON a.cor_id = b.id
        WHERE  date(a.update_time) >= DATE_SUB(CURDATE(), INTERVAL ${day} DAY)) c
        GROUP BY c.id,c.cname
        ORDER BY count(c.id) DESC
        LIMIT ${start*limit-limit},${limit}
    </select>

</mapper>